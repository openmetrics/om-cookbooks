#
# Cookbook Name:: openmetrics
# Recipe:: default
#

#om_home = '/#{node[:matching_node][:user]}'
om_home = '/opt/openmetrics'
om_hostname = 'htpc.localdomain'
git_repository = 'https://git.koppzu.de/grobi/howsecureismyip.git'
git_revision = 'master'

# create system user and group
#
# https://docs.chef.io/resource_user.html
# https://docs.chef.io/resource_group.html
group "om" do
  action :create
  group_name 'om'
end

user 'om' do 
  action :create
  comment 'Openmetrics user'
  supports :manage_home => true
  home om_home
  shell '/bin/bash'
  gid 'om'
end

# verify user home exists
directory "#{om_home}" do
    path om_home
    owner 'om'
    group 'om'
    mode 0755
    action :create
end


#
# create openmetrics dirs and place some files
#

template "#{ENV['HOME']}/hello-world.txt" do
  source 'hello-world.txt.erb'
  mode '0644'
end

remote_file "#{Chef::Config[:file_cache_path]}/background.png" do
  source 'http://placehold.it/1920x1080'
  path "#{om_home}/wallpaper.png"
end


# create ssh keys
chef_gem 'sshkey'
# Base location of ssh key
pkey = om_home + '/.ssh/id_rsa'

# Generate a keypair with Ruby
require 'sshkey'
sshkey = SSHKey.generate(
  type: 'RSA',
  comment: "om@#{om_hostname}"
)

# Create ~/.ssh directory
directory "#{om_home}/.ssh" do
  owner 'om'
  group 'om'
  mode 00700
end

# Store private key on disk
template pkey do
  owner 'om'
  group 'om'
  variables(ssh_private_key: sshkey.private_key)
  mode 00600
  action :create_if_missing
end

# Store public key on disk
template "#{pkey}.pub" do
  owner 'om'
  group 'om'
  variables(ssh_public_key: sshkey.ssh_public_key)
  mode 00644
  action :create_if_missing
end

# Save public key to chef-server as jenkins_pubkey 
#ruby_block 'node-save-pubkey' do
#  block do
#    node.set_unless['jenkins_pubkey'] = File.read("#{pkey}.pub")
#    node.save unless Chef::Config['solo']
#  end
#end

#
# create server dir and checkout webapp
#
directory "#{om_home}/om-server" do
    owner 'om'
    group 'om'
    mode 0755
    action :create
end

git "#{Chef::Config[:file_cache_path]}/openmetrics" do
  repository git_repository
  revision git_revision
  action :sync
  notifies :run, 'execute[move webapp]'
end

execute 'move webapp' do
  not_if { File.exist?("#{om_home}/om-server") }
  command "mv #{Chef::Config[:file_cache_path]}/openmetrics #{om_home}/om-server"
  action :nothing
end

#
# install collectd
#
# t
package "om-collectd" do
  package_name 'collectd'
end

service "collectd" do
  supports :restart => true, :status => true
end


directory "#{om_home}/config" do
    owner 'om'
    group 'om'
    mode 0755
end

directory "#{om_home}/config/collectd" do
    owner 'om'
    group 'om'
    mode 0755
end

directory "#{om_home}/config/collectd/plugins" do
    owner 'om'
    group 'om'
    mode 0755
end

# data dir
directory "#{om_home}/data/collectd/html" do
    owner 'om'
    group 'om'
    mode 0755
    recursive true
end
directory "#{om_home}/data/collectd/rrd" do
    owner 'om'
    group 'om'
    mode 0755
    recursive true
end



%w(collectd.conf.in collection.conf thresholds.conf).each do |file|
  template "#{om_home}/config/collectd/#{file}" do
    source "#{file}.erb"
    owner "root"
    group "root"
    mode "644"
    notifies :restart, resources(:service => "collectd")
  end
end

#ruby_block "delete_old_plugins" do
#  block do
#    Dir['/etc/collectd/plugins/*.conf'].each do |path|
#      autogen = false
#      File.open(path).each_line do |line|
#        if line.start_with?('#') and line.include?('autogenerated')
#          autogen = true
#          break
#        end
#      end
#      if autogen
#        begin
#          resources(:template => path)
#        rescue ArgumentError, Chef::Exceptions::ResourceNotFound
#          # If the file is autogenerated and has no template it has likely been removed from the run list
#          Chef::Log.info("Deleting old plugin config in #{path}")
#          File.unlink(path)
#        end
#      end
#    end
#  end
#end

service "collectd" do
  action [:enable, :start]
end

